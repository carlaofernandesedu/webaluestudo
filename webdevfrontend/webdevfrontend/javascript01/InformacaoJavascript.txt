DOUGLAS QUINTANILHA - 
------------------------------
MOTIVO DE JAVASCRIPT
------------------------------
linguagem nativa da web
usuário interagir com a página 
melhorar a usabilidade 

Lado do servicor - NODE.JS - um ambiente servidor Web Completo utilizando Javascript 
Programar no Arduino com biblioteca Johnny-Five  - Placa para a parte Robotica - 
Desktop framewrok Electron  - Editor Html CSS e JAavascript 
Banco de Dados - Mongo DB 
Plataforma internet das Coisas


Ao inves de usar Ola Mundo pode usar o console.log.. para acessar a console do Navegador use a tecla "F12"
MacOS COMMAND+ALT+J 
Unexpected Identifier - erro de interpretacao de javascript - 

document e querySelector("") e textContent (acessar conteudo dentro do elemento)

BOA PRATICA 
Nao acessar a tag direto e sim utilizar outros meios . Por meio de seletores CSS -  classe ou id do elemento 
Arquivos diferentes . com diferentes extensoes 
pasta js  criar o arquivo principal.js 
<script src="js/principal.js"></script> e colocar no final do script
DOM - Documento Object Model - 

-----------------------------------------
OPERADORES LOGICOS E IFS && e || 
Array Classes e ESTILO 
-----------------------------------------------------
querySelectorAll  retornar varios registros 
<elemento>.classList = 
style.backColor ="true" aplicando estilos 
titulo.classList.add("titulo"); adiciona a classe css ao elemento 
----------------------------------------------------

REMOVER O ELEMENTO DONO DO EVENTO 
addEventListener("dblclick", function(){
    this.remove(); 
});

Event Bubbling ou borbulhamento == 
Pode colocar ouvir o evento no elemento pai 
para descobrir quem clicou pode usar o item event.target => ALVO


.fadeOut {
    opacity: 0;
    transition: 0.5s;
}

implementar a classe para esconder o item a partir de um intervalo 
 event.target.parentNode.classList.add("fadeOut");

    setTimeout(function() {
        event.target.parentNode.remove();
    }, 500);


As expressões regulares são um tipo especial de texto, que nos auxilia a buscarmos por strings, facilitando quando o termo for maior
var expressao = new RegExp();
Nós poderemos passar dois parâmetros para o objeto, sendo o primeiro o texto que queremos buscar, no caso, o termo digitado no campo de busca (this.value), 
e o segundo parâmetro será referente às características dos termos que devem ser buscados. É importante que a busca não seja case sensitive, 
que é a diferenciação entre letras maiúsculas e minúsculas. 
Devem ser buscadas tanto letras maiúsculas como minúsculas, e passaremos a letra "i" 
var expressao = new RegExp(this.value, "i");
var expressao = new RegExp(this.value, "i"); if (expressao.test(nome))

Podemos utilizar a função substr, que recebe dois parâmetros, 
fazendo com que ela devolva parte da string, com o tamanho definido nos parâmetros. 
O primeiro parâmetro é o início, começando do 0 (que representa o primeiro caractere). O segundo parâmetro define o fim (exclusivo, mostramos até o penúltimo caractere)

Podemos utilizar a função substr, que recebe dois parâmetros, fazendo com que ela devolva parte da string, com o tamanho definido nos parâmetros. O primeiro parâmetro é o início, começando do 0 (que representa o primeiro caractere). O segundo parâmetro define o fim (exclusivo, mostramos até o penúltimo caractere)
var comparavelMinusculo = comparavel.toLowerCase();
var valorDigitadoMinusculo = this.value.toLowerCase();


Não sabemos de onde vêm os dados, como e de que maneira eles foram gerados, pois eles se encontram disponibilizados e prontos para uso, sendo esta uma característica de uma API.

O XMLHttpRequest é um objeto do JS responsável por fazer requisições HTTP
var xhr = new XMLHttpRequest();
 xhr.open("GET", "https://api-pacientes.herokuapp.com/pacientes");
 xhr.addEventListener("load", function(){
    });
    xhr.send();

Devolve pelo xhr.responseText
m parseador de JSON para objetos do JavaScript. Para realizarmos esta tarefa usaremos o método parse(). 
Assim, receberemos o texto em JSON, que depois será parseado. Em seguida, será retornado um objeto JavaScript. 
Como nossa resposta se parece com um objeto, o método entenderá isso e nos retornará um array do objetos:
JSON.parse(resposta);
Verificar retorno 
if (xhr.status == 200) {
console.log(xhr.status);
console.log(xhr.responseText);
