$(".placar").show(); //display block  
$(".placar").hide();//display none
$(".placar").toggle mostar ou esconde dependendo da situacao 
semelhante a classe toggleClass

para deixar ja com scroll
body {
    overflow: scroll;
}

transicao mais devagar para aparecer 
body {
    overflow: scroll;
}
function mostraPlacar() {
    $(".placar").slideDown(600);
}

$(".placar").slideToggle(600);
Como exibir um elemento com a função show e ocultá-lo com a função hide.
Como alternar entre as funções show e hide com a função toggle.
Como exibir e ocultar um elemento de uma maneira mais suave, com as funções slideDown e slideUp, respectivamente.
Como alternar entre as funções slideDown e slideUp com a função slideToggle.

Esmaecendo ao inves de sumir de vez 
$(this).parent().parent().fadeOut();
linha.fadeOut();
linha.remove();
linha.fadeOut(1000);
    setTimeout(function() {
        linha.remove();
    }, 1000);
}
semelhantes que executam o fade, o fadeIn, fadeOut e fadeToggle, respectivamente.

para a animacao e evitar inumera animacoes para o usuario
$(".placar").stop().slideToggle(600);

function scrollPlacar() {
    var posicaoPlacar = $(".placar").offset().top;
}



function scrollPlacar() {
    var posicaoPlacar = $(".placar").offset().top;

    $("body").animate(
    {
        scrollTop: posicaoPlacar + "px"
    }, 1000);
}

Esta correta! o jQuery possui a função hasClass que retorna true se um elemento possui ou não uma classe. Na condição, removemos a classe invisivel caso o elemento já a tenha e a adicionamos caso ele não a tenha. Todo esse processo é feito a cada clique do usuário.
 if(promocoes.hasClass('invisivel')) {

    promocoes.removeClass('invisivel');
  } else {
    promocoes.addClass('invisivel');
  }

  var promocoes = $('.promocoes');
  if(promocoes.is(':visible')) {

    promocoes.hide();
  } else {
    promocoes.show();
  }
  elemento esta com display diferente de none ele ganha a pseudo classe :visible . A função is retorna true caso o elemento esteja visível


  Para evitar de ter que fazer duas vezes $(this) Luciano decidiu guardar o this promovido para jQuery Object na variável $this. O prefixo $ deixa claro para ela que é um jQuery Object e não um this ordinário.


Para que a remoção seja feito só depois do efeito de fadeOut ter terminado, ela passou uma função para a função fadeOut. Essa função é chamada só quando fadeOut termina. Sendo assim, na função ela pôde chamar $this.remove() com a certeza que o efeito de fadeOut já foi processado.
 var $this = $(this);

    $this.fadeOut(function() {
        $this.remove();
    })


O que queremos fazer aqui é disponibilizar algumas frases em um servidor
via Ajax de forma assincrona 
function fraseAleatoria() {
    $.get("http://localhost:3000/frases");
}
pasando dados para uma funcao tratar
function fraseAleatoria() {
    $.get("http://localhost:3000/frases", trocaFraseAleatoria);
}
function trocaFraseAleatoria(data) {
}
function trocaFraseAleatoria(data) {
    var frase = $(".frase");
    frase.text(data[0].texto);


}

var numeroAleatorio = Math.floor(Math.random() * data.length);
Como fazer uma requisição AJAX com jQuery
Buscando dados com AJAX
Como gerar um número aleatório no Javascript
Como está estruturado a url /frases
A buscar uma frase aleatória com AJAX

servidor web rodando localmente em sua máquina.
O Node.js é um ambiente JavaScript multiplataforma disponível para Linux, Mac e Windows

Baixe o instalador clicando no grande botão install diretamente da página do Node.js. Durante a instalação, você apenas clicará botões para continuar o assistente. Não troque a pasta padrão do Node.js durante a instalação a não ser que você saiba exatamente o que está fazendo


Tratamento de Erro para requisicao de AJAX 
 $.get("http://localhost:3000/frases2222", trocaFraseAleatoria) //URL errada para simular um problema
    .fail(function(){
        $("#erro").show(); //ao falhar mostra a mensagem de erro
    });

     $("#erro").toggle();
        setTimeout(function(){
            $("#erro").toggle();
        },1500);

#spinner{
    display: none;
}
$("#spinner").toggle();

.always(function(){ //sempre escondendo o spinner
        $("#spinner").toggle();
    });
    Melhorando a experiência do usuário
Criando um spinner na aplicação
A função .always() do jQuery

Passando parametros na requisicao de ajaxa 
var fraseId = $("#frase-id").val();
    var dados = {id : fraseId}; //criacao do objeto JS que guarda a id

    //passando objeto como segundo parametro
    $.get("http://localhost:3000/frases", dados, trocaFrase);

function sincronizaPlacar(){
    var placar = [];
    var linhas = $("tbody>tr");

    linhas.each(function(){
        var usuario = $(this).find("td:nth-child(1)");
        var palavras = $(this).find("td:nth-child(2)");

    });
}

var dados = {
        placar: placar
    };
    $.post("http://localhost:3000/placar", dados, function(){
    });

A importancia de dominar o CSS quando estamos trabalhando com JS e jQuery
Utilizando seletores avançados com a função find
A função $.each() para percorrer um array
O formato correto de enviar dados com as funções de AJAX
Enviando dados com a função $.post()

Funcao atualiza placar 
function atualizaPlacar(){
    $.get("http://localhost:3000/placar",function(data){
        data.each(function(){

        });
    });
}
function atualizaPlacar(){
    $.get("http://localhost:3000/placar",function(data){
        $(data).each(function(){
            var linha = novaLinha(this.usuario, this.pontos);
            $("tbody").append(linha);
        });
    });
}

 $.get("http://localhost:3000/placar",function(data){
        $(data).each(function(){
            var linha = novaLinha(this.usuario, this.pontos);

            //modificado aqui
            linha.find(".botao-remover").click(removeLinha);

            $("tbody").append(linha);
        });
    });


    var letras = ['a', 'b', 'c'];

$.each(letras, function() {

     console.log(this);
});

letras.forEach(function(letra) {
    console.log(letra);
});

CROSS same origin 
 navegador possui uma proteção que é chamada de Same Origin Policy

 CORS - Cross-Origin Resource Sharing
 permitir ser chamado a partir de outras orignes 
Ele adiciona no protocolo http as origens que permitem a solicitacao 
 Access-Control-Allow-Origin: http://localhost:3000, http://192.168.0.83:3000

Configuracao via node para permitir a execucao no servidor de outra origem 
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "http://localhost:3000, http://192.168.0.83:3000");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

cors habilitadno no NODE.JS
1) Primeiro pare a servidor da pasta alura-typer-servidor-cors.

2) Abra o arquivo express.js dentro da pasta alura-typer-servidor-cors/servidor/config.



COMPONENTES EXTRAS 

http://kenwheeler.github.io/slick/

No select TAG 
http://selectize.github.io/selectize.js/

TOOLTIP
http://iamceege.github.io/tooltipster/